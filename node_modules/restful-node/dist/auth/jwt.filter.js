"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jwt_1 = require("./jwt");
const filter_1 = require("./filter");
const errors_1 = require("../errors");
class JWTFilter extends filter_1.default {
    constructor(secret, ttl = null) {
        super();
        this.secret = secret;
        this.ttl = ttl;
        this.jwt = new jwt_1.default(secret, ttl);
    }
    canAccess(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!req.headers['authorization']) {
                throw new errors_1.UnauthorizedError('Missing Authorization header');
            }
            else if (!req.headers['authorization'].startsWith('bearer ')) {
                throw new errors_1.UnauthorizedError('Authorization header must be prefixed with "bearer "');
            }
            let decoded;
            try {
                decoded = yield this.jwt.verify(req.headers['authorization'].substring('bearer '.length));
            }
            catch (e) {
                throw new errors_1.ForbiddenError(e.message);
            }
            req.decoded = decoded;
            return true;
        });
    }
}
exports.default = JWTFilter;
