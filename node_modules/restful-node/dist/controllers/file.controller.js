"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const auth_controller_1 = require("./auth.controller");
const multer = require("multer");
const file_validator_filter_1 = require("../files/file-validator.filter");
const file_mover_filter_1 = require("../files/file-mover.filter");
const file_handler_1 = require("../files/file-handler");
const http_error_1 = require("../errors/http.error");
class FileController extends auth_controller_1.default {
    constructor(prefix = '', options = {}) {
        super(prefix, options);
        this.root = null;
        this.allowedMimeTypes = [];
        this.maxSize = -1;
        this.denyUploadOn = [];
        this.root = options.root || this.root;
        this.upload = multer({ dest: this.root });
        this.maxSize = options.maxSize || this.maxSize;
        this.middleware.push(this.upload.single(options.fieldname || 'file'));
        this.filters.push(
        // Validates that the properties of the files follows the
        // server's restrictions
        new file_validator_filter_1.default(this.allowedMimeTypes, this.maxSize), 
        // 1. Ensures no two identical files overwrites each other
        // 2. Moves the file to the correct position
        new file_mover_filter_1.default(this.root));
    }
    /**
     * Will handle file upload for automatically.
     * Would you like to override this method,
     * the file-properties is available in `req.file`
     * */
    create(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.root == null || this.root == undefined) {
                return next(new http_error_1.MethodNotAllowed());
            }
            if (!req.file) {
                return next(new http_error_1.BadRequestError('No file to upload'));
            }
            res.status(201).json({
                file: {
                    name: req.file.filename,
                    size: req.file.size,
                    mimetype: req.file.mimetype
                }
            });
        });
    }
    /**
     * List all the static content available
     * in the root folder (only if root is specified).
     * */
    list(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.root == null || this.root == undefined) {
                return next(new http_error_1.MethodNotAllowed());
            }
            let items = yield file_handler_1.ls(this.root);
            res.status(items.length > 0 ? 200 : 204).json(items);
        });
    }
    /**
     * Will delete the file from the root
     * */
    destroy(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.root == null || this.root == undefined) {
                return next(new http_error_1.MethodNotAllowed());
            }
            let items = yield file_handler_1.ls(this.root);
            if (!items.includes(req.params.id)) {
                return next(new http_error_1.NotFoundError(`Cannot find resource ${req.params[this.pk]}`));
            }
            try {
                yield file_handler_1.rm(`${this.root}/${req.params[this.pk]}`);
            }
            catch (e) {
                return next(e);
            }
            res.sendStatus(204);
        });
    }
    createWrapper(req, res, next) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.clearFileIfDisabled('create', req);
            }
            catch (e) {
                return next(e);
            }
            _super("createWrapper").call(this, req, res, next);
        });
    }
    listWrapper(req, res, next) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.clearFileIfDisabled('list', req);
            }
            catch (e) {
                return next(e);
            }
            _super("listWrapper").call(this, req, res, next);
        });
    }
    retrieveWrapper(req, res, next) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.clearFileIfDisabled('list', req);
            }
            catch (e) {
                return next(e);
            }
            _super("listWrapper").call(this, req, res, next);
        });
    }
    updateWrapper(req, res, next) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.clearFileIfDisabled('update', req);
            }
            catch (e) {
                return next(e);
            }
            _super("updateWrapper").call(this, req, res, next);
        });
    }
    /**
     * If `destroy` is disabled or denyUploadOn contains `destroy`,
     * we'll remove the buffered file and clear out req.file
     *
     * */
    destroyWrapper(req, res, next) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.clearFileIfDisabled('destroy', req);
            }
            catch (e) {
                return next(e);
            }
            _super("destroyWrapper").call(this, req, res, next);
        });
    }
    /**
     * Will remove the buffered file and `req.file`,
     * if `method` is disabled or denied uploading
     * */
    clearFileIfDisabled(method, req) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!req.file) {
                return;
            }
            if (this.disable.includes(method) ||
                this.denyUploadOn.includes(method)) {
                try {
                    yield file_handler_1.rm(`${req.file.path}`);
                }
                catch (e) {
                    throw e;
                }
                req.file = null; // Clear out file
            }
        });
    }
}
exports.default = FileController;
