"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const http_error_1 = require("../errors/http.error");
class Controller {
    constructor(options = {}) {
        this.disable = [];
        this.opt = options;
        this.get = this.get.bind(this);
        this.post = this.post.bind(this);
        this.put = this.put.bind(this);
        this.patch = this.patch.bind(this);
        this.delete = this.delete.bind(this);
        this.head = this.head.bind(this);
        this.options = this.options.bind(this);
        this.getWrapper = this.getWrapper.bind(this);
        this.postWrapper = this.postWrapper.bind(this);
        this.patchWrapper = this.patchWrapper.bind(this);
        this.putWrapper = this.putWrapper.bind(this);
        this.deleteWrapper = this.deleteWrapper.bind(this);
        this.headWrapper = this.headWrapper.bind(this);
        this.optionsWrapper = this.optionsWrapper.bind(this);
        this.disableMethod = this.disableMethod.bind(this);
        this.generalFilter = this.generalFilter.bind(this);
        this.asView = this.asView.bind(this);
    }
    disableMethod(method) {
        if (!this.disable.includes(method.toLowerCase())) {
            this.disable.push(method.toLowerCase());
        }
    }
    get(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            res.sendStatus(405);
        });
    }
    post(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            res.sendStatus(405);
        });
    }
    put(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            res.sendStatus(405);
        });
    }
    patch(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            res.sendStatus(405);
        });
    }
    delete(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            res.sendStatus(405);
        });
    }
    head(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            res.sendStatus(405);
        });
    }
    options(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            res.sendStatus(405);
        });
    }
    getWrapper(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(req, res, next);
        });
    }
    postWrapper(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.post(req, res, next);
        });
    }
    putWrapper(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.put(req, res, next);
        });
    }
    patchWrapper(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.patch(req, res, next);
        });
    }
    deleteWrapper(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.delete(req, res, next);
        });
    }
    headWrapper(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.head(req, res, next);
        });
    }
    optionsWrapper(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.options(req, res, next);
        });
    }
    /**
     * Is called on every request
     *
     * */
    generalFilter(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            // Will disable methods
            if (this.disable.includes(req.method.toLowerCase())) {
                return next(new http_error_1.MethodNotAllowed());
            }
            next();
        });
    }
    /**
     * Will register the methods to it's adjacent
     * HTTP-methods
     *
     * */
    asView() {
        const router = express.Router();
        router.post(this.opt.prefix || '', this.generalFilter, this.postWrapper);
        router.get(this.opt.prefix || '', this.generalFilter, this.getWrapper);
        router.put(this.opt.prefix || '', this.generalFilter, this.putWrapper);
        router.patch(this.opt.prefix || '', this.generalFilter, this.patchWrapper);
        router.delete(this.opt.prefix || '', this.generalFilter, this.deleteWrapper);
        router.head(this.opt.prefix || '', this.generalFilter, this.headWrapper);
        router.options(this.opt.prefix || '', this.generalFilter, this.optionsWrapper);
        return router;
    }
}
exports.default = Controller;
