"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const filter_1 = require("../auth/filter");
const http_error_1 = require("../errors/http.error");
class FileValidatorFilter extends filter_1.default {
    constructor(allowedMimeTypes, maxSize) {
        super();
        this.maxSize = -1;
        this.allowedMimeTypes = allowedMimeTypes;
        this.maxSize = maxSize;
    }
    canAccess(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!req.file) {
                return;
            }
            const file = req.file;
            if (this.allowedMimeTypes.length > 0 &&
                !this.allowedMimeTypes.includes(file.mimetype)) {
                throw new http_error_1.BadRequestError(`Illegal filetype ${file.mimetype}`);
            }
            if (this.maxSize > -1 && file.size > this.maxSize) {
                throw new http_error_1.EntityTooLargeError(`Entity-size ${file.size} bytes exceeds the max-size ${this.maxSize} bytes`);
            }
        });
    }
}
exports.default = FileValidatorFilter;
