"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const filter_1 = require("../auth/filter");
const file_handler_1 = require("./file-handler");
const http_error_1 = require("../errors/http.error");
class FileMoverFilter extends filter_1.default {
    constructor(root) {
        super();
        this.root = root;
    }
    canAccess(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const { file } = req;
            if (!file) {
                return;
            } // No need to validate a file which is non existent
            try {
                yield this.abortIfExists(file); // Expects to throw an HttpError
                yield file_handler_1.mv(`${file.path}`, `${file.destination}/${file.originalname}`);
            }
            catch (e) {
                throw e;
            }
            req.file.filename = req.file.originalname;
            req.file.path = `${req.file.destination}/${req.file.originalname}`;
        });
    }
    /**
     * Prevent us from unwanted overwriting of files
     * @param   {object}    file
     * */
    abortIfExists(file) {
        return __awaiter(this, void 0, void 0, function* () {
            let items = yield file_handler_1.ls(`${file.destination}`);
            if (items.includes(file.originalname)) {
                yield file_handler_1.rm(file.path); // Remove the buffer file
                throw new http_error_1.BadRequestError(`File: ${file.originalname} already exists`);
            }
        });
    }
}
exports.default = FileMoverFilter;
