"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const filter_1 = require("../auth/filter");
const http_error_1 = require("../errors/http.error");
class FileValidatorFilter extends filter_1.default {
    constructor(allowedMimeTypes, maxSize) {
        super();
        this.maxSize = -1;
        this.allowedMimeTypes = allowedMimeTypes;
        this.maxSize = maxSize;
    }
    canAccess(req, res) {
        return new Promise((rsv, rr) => {
            const file = req.file;
            if (!file) {
                return rsv(); // No file to check
            }
            if (this.allowedMimeTypes.length > 0 &&
                !this.allowedMimeTypes.includes(file.mimetype)) {
                return rr(new http_error_1.BadRequestError(`Illegal filetype ${file.mimetype}`));
            }
            if (this.maxSize > -1 && file.size > this.maxSize) {
                return rr(new http_error_1.EntityTooLargeError(`Entity-size ${file.size} bytes exceeds the max-size ${this.maxSize} bytes`));
            }
            rsv();
        });
    }
}
exports.default = FileValidatorFilter;
