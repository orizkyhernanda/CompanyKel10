"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = require("./controllers/controller");
const rest_controller_1 = require("./controllers/rest-controller");
const auth_controller_1 = require("./controllers/auth.controller");
const file_controller_1 = require("./controllers/file.controller");
const database_setup_1 = require("./database/database-setup");
const routes_1 = require("./routes");
const errors = require("./errors");
const filter_1 = require("./auth/filter");
const jwt_filter_1 = require("./auth/jwt.filter");
const jwt_1 = require("./auth/jwt");
const jwt_auth_controller_1 = require("./controllers/jwt-auth.controller");
const file_handler_1 = require("./files/file-handler");
const mimetypes_1 = require("./files/mimetypes");
const setup_1 = require("./setup");
// Add Array includes polyfill if needed
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill
if (!Array.prototype.includes) {
    Array.prototype.includes = function (searchElement /*, fromIndex*/) {
        'use strict';
        const O = Object(this);
        const len = parseInt(O.length, 10) || 0;
        if (len === 0) {
            return false;
        }
        const n = parseInt(arguments[1], 10) || 0;
        let k;
        if (n >= 0) {
            k = n;
        }
        else {
            k = len + n;
            if (k < 0) {
                k = 0;
            }
        }
        let currentElement;
        while (k < len) {
            currentElement = O[k];
            if (searchElement === currentElement) {
                return true;
            }
            k++;
        }
        return false;
    };
}
module.exports = {
    errors,
    controllers: {
        Controller: controller_1.default,
        RestController: rest_controller_1.default,
        AuthController: auth_controller_1.default,
        JWTAuthController: jwt_auth_controller_1.default,
        FileController: file_controller_1.default
    },
    routes: { urls: routes_1.urls, notFoundHandler: routes_1.notFoundHandler },
    database: { setupMongoose: database_setup_1.setupMongoose },
    auth: { Filter: filter_1.default, JWT: jwt_1.default, JWTFilter: jwt_filter_1.default },
    files: { MimeTypes: mimetypes_1.MimeTypes, ls: file_handler_1.ls, rm: file_handler_1.rm, mv: file_handler_1.mv },
    setup: { settings: setup_1.settings }
};
